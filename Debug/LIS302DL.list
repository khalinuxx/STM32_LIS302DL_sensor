
LIS302DL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001784  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800190c  0800190c  0001190c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000000b8  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000bc  200000bc  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00009e47  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00008dd6  00000000  00000000  00029e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000018e5  00000000  00000000  00032c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000578  00000000  00000000  00034538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0006b62c  00000000  00000000  00034ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  000a00e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00004044  00000000  00000000  000a0868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013c4e  00000000  00000000  000a48ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000b84fa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000e74  00000000  00000000  000b854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018f4 	.word	0x080018f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080018f4 	.word	0x080018f4

080001c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
  ldr  r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001f2:	f000 f813 	bl	800021c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f001 fb59 	bl	80018ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80001fa:	f001 f8e3 	bl	80013c4 <main>
  bx  lr    
 80001fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000204:	08001924 	.word	0x08001924
  ldr  r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800020c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000210:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000214:	200000bc 	.word	0x200000bc

08000218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <SystemInit+0x40>)
 800021e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <SystemInit+0x44>)
 800022c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800022e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000230:	f042 0201 	orr.w	r2, r2, #1
 8000234:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000236:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800023e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000242:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <SystemInit+0x48>)
 8000246:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800024e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000250:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000256:	608b      	str	r3, [r1, #8]
#endif
}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000ed00 	.word	0xe000ed00
 8000260:	40023800 	.word	0x40023800
 8000264:	24003010 	.word	0x24003010

08000268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000268:	b507      	push	{r0, r1, r2, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <HAL_InitTick+0x28>)
{
 800026c:	9001      	str	r0, [sp, #4]
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800026e:	6818      	ldr	r0, [r3, #0]
 8000270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000274:	fbb0 f0f3 	udiv	r0, r0, r3
 8000278:	f000 f886 	bl	8000388 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800027c:	9901      	ldr	r1, [sp, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	f04f 30ff 	mov.w	r0, #4294967295
 8000284:	f000 f84e 	bl	8000324 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000288:	2000      	movs	r0, #0
 800028a:	b003      	add	sp, #12
 800028c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000290:	20000000 	.word	0x20000000

08000294 <HAL_Init>:
{
 8000294:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <HAL_Init+0x30>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800029e:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002ae:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b0:	2003      	movs	r0, #3
 80002b2:	f000 f825 	bl	8000300 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ffd6 	bl	8000268 <HAL_InitTick>
  HAL_MspInit();
 80002bc:	f001 fa70 	bl	80017a0 <HAL_MspInit>
}
 80002c0:	2000      	movs	r0, #0
 80002c2:	bd08      	pop	{r3, pc}
 80002c4:	40023c00 	.word	0x40023c00

080002c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002c8:	4a02      	ldr	r2, [pc, #8]	; (80002d4 <HAL_IncTick+0xc>)
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000020 	.word	0x20000020

080002d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002d8:	4b01      	ldr	r3, [pc, #4]	; (80002e0 <HAL_GetTick+0x8>)
 80002da:	6818      	ldr	r0, [r3, #0]
}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000020 	.word	0x20000020

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002e4:	b513      	push	{r0, r1, r4, lr}
 80002e6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80002e8:	f7ff fff6 	bl	80002d8 <HAL_GetTick>
 80002ec:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80002ee:	f7ff fff3 	bl	80002d8 <HAL_GetTick>
 80002f2:	9a01      	ldr	r2, [sp, #4]
 80002f4:	1b03      	subs	r3, r0, r4
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d3f9      	bcc.n	80002ee <HAL_Delay+0xa>
  {
  }
}
 80002fa:	b002      	add	sp, #8
 80002fc:	bd10      	pop	{r4, pc}
	...

08000300 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000300:	4907      	ldr	r1, [pc, #28]	; (8000320 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000302:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000304:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000308:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800030c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000310:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800031c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800031e:	4770      	bx	lr
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000326:	b530      	push	{r4, r5, lr}
 8000328:	68dc      	ldr	r4, [r3, #12]
 800032a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800032e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000332:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	2d04      	cmp	r5, #4
 8000336:	bf28      	it	cs
 8000338:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000340:	bf8c      	ite	hi
 8000342:	3c03      	subhi	r4, #3
 8000344:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000346:	fa03 f505 	lsl.w	r5, r3, r5
 800034a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800034e:	40a3      	lsls	r3, r4
 8000350:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000354:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000356:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035c:	bfac      	ite	ge
 800035e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000362:	4a08      	ldrlt	r2, [pc, #32]	; (8000384 <HAL_NVIC_SetPriority+0x60>)
 8000364:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000368:	bfb8      	it	lt
 800036a:	f000 000f 	andlt.w	r0, r0, #15
 800036e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000370:	bfaa      	itet	ge
 8000372:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000376:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	bf00      	nop
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	e000ed14 	.word	0xe000ed14

08000388 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000388:	3801      	subs	r0, #1
 800038a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800038e:	d20b      	bcs.n	80003a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000390:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	4a05      	ldr	r2, [pc, #20]	; (80003ac <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000396:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	21f0      	movs	r1, #240	; 0xf0
 800039a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800039e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003a2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003aa:	4770      	bx	lr
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80003b4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003b6:	691a      	ldr	r2, [r3, #16]
 80003b8:	bf0c      	ite	eq
 80003ba:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003be:	f022 0204 	bicne.w	r2, r2, #4
 80003c2:	611a      	str	r2, [r3, #16]
  }
}
 80003c4:	4770      	bx	lr

080003c6 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80003c6:	4770      	bx	lr

080003c8 <HAL_SYSTICK_IRQHandler>:
{
 80003c8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80003ca:	f7ff fffc 	bl	80003c6 <HAL_SYSTICK_Callback>
}
 80003ce:	bd08      	pop	{r3, pc}

080003d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80003d4:	4a6e      	ldr	r2, [pc, #440]	; (8000590 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000598 <HAL_GPIO_Init+0x1c8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003da:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800059c <HAL_GPIO_Init+0x1cc>
{
 80003de:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003e0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003e2:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01U) << position;
 80003e4:	2701      	movs	r7, #1
 80003e6:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003e8:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 80003ec:	ea37 0404 	bics.w	r4, r7, r4
 80003f0:	f040 80b9 	bne.w	8000566 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003f4:	684c      	ldr	r4, [r1, #4]
 80003f6:	f024 0a10 	bic.w	sl, r4, #16
 80003fa:	f1ba 0f02 	cmp.w	sl, #2
 80003fe:	d116      	bne.n	800042e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8000400:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000404:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000408:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800040c:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000410:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000414:	f04f 0c0f 	mov.w	ip, #15
 8000418:	fa0c fc0b 	lsl.w	ip, ip, fp
 800041c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000420:	690e      	ldr	r6, [r1, #16]
 8000422:	fa06 f60b 	lsl.w	r6, r6, fp
 8000426:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800042a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 800042e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000432:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000436:	f04f 0c03 	mov.w	ip, #3
 800043a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800043e:	ea6f 060c 	mvn.w	r6, ip
 8000442:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000446:	f004 0c03 	and.w	ip, r4, #3
 800044a:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800044e:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000452:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000456:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800045a:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 800045c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000460:	d815      	bhi.n	800048e <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000462:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000466:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800046a:	68ce      	ldr	r6, [r1, #12]
 800046c:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000470:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000474:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000478:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800047c:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000480:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000484:	fa0c fc03 	lsl.w	ip, ip, r3
 8000488:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 800048c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800048e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000490:	9e01      	ldr	r6, [sp, #4]
 8000492:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000494:	688e      	ldr	r6, [r1, #8]
 8000496:	fa06 f60e 	lsl.w	r6, r6, lr
 800049a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800049c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800049e:	00e6      	lsls	r6, r4, #3
 80004a0:	d561      	bpl.n	8000566 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	f04f 0b00 	mov.w	fp, #0
 80004a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80004aa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ae:	4e39      	ldr	r6, [pc, #228]	; (8000594 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80004b4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80004b8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80004bc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80004c0:	9703      	str	r7, [sp, #12]
 80004c2:	9f03      	ldr	r7, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80004c4:	f023 0703 	bic.w	r7, r3, #3
 80004c8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80004cc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004d0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80004d4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004d8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80004dc:	f04f 0c0f 	mov.w	ip, #15
 80004e0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004e4:	42b0      	cmp	r0, r6
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004e6:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ea:	d043      	beq.n	8000574 <HAL_GPIO_Init+0x1a4>
 80004ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80004f0:	42b0      	cmp	r0, r6
 80004f2:	d041      	beq.n	8000578 <HAL_GPIO_Init+0x1a8>
 80004f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80004f8:	42b0      	cmp	r0, r6
 80004fa:	d03f      	beq.n	800057c <HAL_GPIO_Init+0x1ac>
 80004fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000500:	42b0      	cmp	r0, r6
 8000502:	d03d      	beq.n	8000580 <HAL_GPIO_Init+0x1b0>
 8000504:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000508:	42b0      	cmp	r0, r6
 800050a:	d03b      	beq.n	8000584 <HAL_GPIO_Init+0x1b4>
 800050c:	4548      	cmp	r0, r9
 800050e:	d03b      	beq.n	8000588 <HAL_GPIO_Init+0x1b8>
 8000510:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000514:	42b0      	cmp	r0, r6
 8000516:	d039      	beq.n	800058c <HAL_GPIO_Init+0x1bc>
 8000518:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800051c:	42b0      	cmp	r0, r6
 800051e:	bf0c      	ite	eq
 8000520:	2607      	moveq	r6, #7
 8000522:	2608      	movne	r6, #8
 8000524:	fa06 f60e 	lsl.w	r6, r6, lr
 8000528:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800052c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800052e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000530:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000532:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000536:	bf0c      	ite	eq
 8000538:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800053a:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800053c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800053e:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000540:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000544:	bf0c      	ite	eq
 8000546:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000548:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800054a:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800054c:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800054e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000552:	bf0c      	ite	eq
 8000554:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000556:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000558:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800055a:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800055c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800055e:	bf54      	ite	pl
 8000560:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000562:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000564:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000566:	3301      	adds	r3, #1
 8000568:	2b10      	cmp	r3, #16
 800056a:	f47f af3a 	bne.w	80003e2 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 800056e:	b005      	add	sp, #20
 8000570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000574:	465e      	mov	r6, fp
 8000576:	e7d5      	b.n	8000524 <HAL_GPIO_Init+0x154>
 8000578:	2601      	movs	r6, #1
 800057a:	e7d3      	b.n	8000524 <HAL_GPIO_Init+0x154>
 800057c:	2602      	movs	r6, #2
 800057e:	e7d1      	b.n	8000524 <HAL_GPIO_Init+0x154>
 8000580:	2603      	movs	r6, #3
 8000582:	e7cf      	b.n	8000524 <HAL_GPIO_Init+0x154>
 8000584:	2604      	movs	r6, #4
 8000586:	e7cd      	b.n	8000524 <HAL_GPIO_Init+0x154>
 8000588:	2605      	movs	r6, #5
 800058a:	e7cb      	b.n	8000524 <HAL_GPIO_Init+0x154>
 800058c:	2606      	movs	r6, #6
 800058e:	e7c9      	b.n	8000524 <HAL_GPIO_Init+0x154>
 8000590:	40013c00 	.word	0x40013c00
 8000594:	40020000 	.word	0x40020000
 8000598:	40023800 	.word	0x40023800
 800059c:	40021400 	.word	0x40021400

080005a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005a0:	b10a      	cbz	r2, 80005a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005a2:	6181      	str	r1, [r0, #24]
  }
}
 80005a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005a6:	0409      	lsls	r1, r1, #16
 80005a8:	e7fb      	b.n	80005a2 <HAL_GPIO_WritePin+0x2>
	...

080005ac <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005ac:	6803      	ldr	r3, [r0, #0]
{
 80005ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80005b0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005b2:	07d8      	lsls	r0, r3, #31
 80005b4:	d438      	bmi.n	8000628 <HAL_RCC_OscConfig+0x7c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	0799      	lsls	r1, r3, #30
 80005ba:	d46c      	bmi.n	8000696 <HAL_RCC_OscConfig+0xea>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	071e      	lsls	r6, r3, #28
 80005c0:	f100 80b8 	bmi.w	8000734 <HAL_RCC_OscConfig+0x188>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	075d      	lsls	r5, r3, #29
 80005c8:	d528      	bpl.n	800061c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	4ba6      	ldr	r3, [pc, #664]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80005d0:	4da6      	ldr	r5, [pc, #664]	; (800086c <HAL_RCC_OscConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80005e4:	682b      	ldr	r3, [r5, #0]
 80005e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ea:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80005ec:	f7ff fe74 	bl	80002d8 <HAL_GetTick>
 80005f0:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	05da      	lsls	r2, r3, #23
 80005f6:	f140 80c1 	bpl.w	800077c <HAL_RCC_OscConfig+0x1d0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005fa:	4d9b      	ldr	r5, [pc, #620]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
 80005fc:	7a23      	ldrb	r3, [r4, #8]
 80005fe:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000602:	68a3      	ldr	r3, [r4, #8]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 80c7 	beq.w	8000798 <HAL_RCC_OscConfig+0x1ec>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800060a:	f7ff fe65 	bl	80002d8 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800060e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000612:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000614:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000616:	079b      	lsls	r3, r3, #30
 8000618:	f140 80b7 	bpl.w	800078a <HAL_RCC_OscConfig+0x1de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800061c:	69a2      	ldr	r2, [r4, #24]
 800061e:	2a00      	cmp	r2, #0
 8000620:	f040 80c9 	bne.w	80007b6 <HAL_RCC_OscConfig+0x20a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000624:	2000      	movs	r0, #0
 8000626:	e015      	b.n	8000654 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000628:	4b8f      	ldr	r3, [pc, #572]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	f002 020c 	and.w	r2, r2, #12
 8000630:	2a04      	cmp	r2, #4
 8000632:	d007      	beq.n	8000644 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000634:	689a      	ldr	r2, [r3, #8]
 8000636:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800063a:	2a08      	cmp	r2, #8
 800063c:	d10c      	bne.n	8000658 <HAL_RCC_OscConfig+0xac>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	0252      	lsls	r2, r2, #9
 8000642:	d509      	bpl.n	8000658 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000644:	4b88      	ldr	r3, [pc, #544]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	039b      	lsls	r3, r3, #14
 800064a:	d5b4      	bpl.n	80005b6 <HAL_RCC_OscConfig+0xa>
 800064c:	6863      	ldr	r3, [r4, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1b1      	bne.n	80005b6 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000652:	2001      	movs	r0, #1
}
 8000654:	b003      	add	sp, #12
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000658:	7922      	ldrb	r2, [r4, #4]
 800065a:	709a      	strb	r2, [r3, #2]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800065c:	6863      	ldr	r3, [r4, #4]
 800065e:	b16b      	cbz	r3, 800067c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8000660:	f7ff fe3a 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000664:	4e80      	ldr	r6, [pc, #512]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000666:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000668:	6833      	ldr	r3, [r6, #0]
 800066a:	039f      	lsls	r7, r3, #14
 800066c:	d4a3      	bmi.n	80005b6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800066e:	f7ff fe33 	bl	80002d8 <HAL_GetTick>
 8000672:	1b40      	subs	r0, r0, r5
 8000674:	2864      	cmp	r0, #100	; 0x64
 8000676:	d9f7      	bls.n	8000668 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8000678:	2003      	movs	r0, #3
 800067a:	e7eb      	b.n	8000654 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
 800067c:	f7ff fe2c 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000680:	4e79      	ldr	r6, [pc, #484]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000682:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000684:	6833      	ldr	r3, [r6, #0]
 8000686:	0398      	lsls	r0, r3, #14
 8000688:	d595      	bpl.n	80005b6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800068a:	f7ff fe25 	bl	80002d8 <HAL_GetTick>
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	2864      	cmp	r0, #100	; 0x64
 8000692:	d9f7      	bls.n	8000684 <HAL_RCC_OscConfig+0xd8>
 8000694:	e7f0      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000696:	4b74      	ldr	r3, [pc, #464]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	f012 0f0c 	tst.w	r2, #12
 800069e:	d007      	beq.n	80006b0 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80006a6:	2a08      	cmp	r2, #8
 80006a8:	d116      	bne.n	80006d8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	0259      	lsls	r1, r3, #9
 80006ae:	d413      	bmi.n	80006d8 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006b0:	496d      	ldr	r1, [pc, #436]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
 80006b2:	680b      	ldr	r3, [r1, #0]
 80006b4:	079a      	lsls	r2, r3, #30
 80006b6:	d502      	bpl.n	80006be <HAL_RCC_OscConfig+0x112>
 80006b8:	68e3      	ldr	r3, [r4, #12]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d1c9      	bne.n	8000652 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006be:	6808      	ldr	r0, [r1, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c0:	23f8      	movs	r3, #248	; 0xf8
 80006c2:	fa93 f3a3 	rbit	r3, r3
 80006c6:	fab3 f283 	clz	r2, r3
 80006ca:	6923      	ldr	r3, [r4, #16]
 80006cc:	4093      	lsls	r3, r2
 80006ce:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80006d2:	4313      	orrs	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006d6:	e771      	b.n	80005bc <HAL_RCC_OscConfig+0x10>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80006d8:	68e2      	ldr	r2, [r4, #12]
 80006da:	4b65      	ldr	r3, [pc, #404]	; (8000870 <HAL_RCC_OscConfig+0x2c4>)
 80006dc:	b1da      	cbz	r2, 8000716 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_ENABLE();
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006e2:	f7ff fdf9 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006e6:	4d60      	ldr	r5, [pc, #384]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 80006e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006ea:	682b      	ldr	r3, [r5, #0]
 80006ec:	079b      	lsls	r3, r3, #30
 80006ee:	d50c      	bpl.n	800070a <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006f0:	6829      	ldr	r1, [r5, #0]
 80006f2:	23f8      	movs	r3, #248	; 0xf8
 80006f4:	fa93 f3a3 	rbit	r3, r3
 80006f8:	fab3 f283 	clz	r2, r3
 80006fc:	6923      	ldr	r3, [r4, #16]
 80006fe:	4093      	lsls	r3, r2
 8000700:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000704:	4313      	orrs	r3, r2
 8000706:	602b      	str	r3, [r5, #0]
 8000708:	e758      	b.n	80005bc <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800070a:	f7ff fde5 	bl	80002d8 <HAL_GetTick>
 800070e:	1b80      	subs	r0, r0, r6
 8000710:	2802      	cmp	r0, #2
 8000712:	d9ea      	bls.n	80006ea <HAL_RCC_OscConfig+0x13e>
 8000714:	e7b0      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_DISABLE();
 8000716:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000718:	f7ff fdde 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800071c:	4e52      	ldr	r6, [pc, #328]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 800071e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000720:	6833      	ldr	r3, [r6, #0]
 8000722:	079f      	lsls	r7, r3, #30
 8000724:	f57f af4a 	bpl.w	80005bc <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000728:	f7ff fdd6 	bl	80002d8 <HAL_GetTick>
 800072c:	1b40      	subs	r0, r0, r5
 800072e:	2802      	cmp	r0, #2
 8000730:	d9f6      	bls.n	8000720 <HAL_RCC_OscConfig+0x174>
 8000732:	e7a1      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000734:	6962      	ldr	r2, [r4, #20]
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <HAL_RCC_OscConfig+0x2c4>)
 8000738:	b182      	cbz	r2, 800075c <HAL_RCC_OscConfig+0x1b0>
      __HAL_RCC_LSI_ENABLE();
 800073a:	2201      	movs	r2, #1
 800073c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000740:	f7ff fdca 	bl	80002d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000744:	4e48      	ldr	r6, [pc, #288]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000746:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000748:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800074a:	0798      	lsls	r0, r3, #30
 800074c:	f53f af3a 	bmi.w	80005c4 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000750:	f7ff fdc2 	bl	80002d8 <HAL_GetTick>
 8000754:	1b40      	subs	r0, r0, r5
 8000756:	2802      	cmp	r0, #2
 8000758:	d9f6      	bls.n	8000748 <HAL_RCC_OscConfig+0x19c>
 800075a:	e78d      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_LSI_DISABLE();
 800075c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000760:	f7ff fdba 	bl	80002d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000764:	4e40      	ldr	r6, [pc, #256]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000766:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000768:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800076a:	0799      	lsls	r1, r3, #30
 800076c:	f57f af2a 	bpl.w	80005c4 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000770:	f7ff fdb2 	bl	80002d8 <HAL_GetTick>
 8000774:	1b40      	subs	r0, r0, r5
 8000776:	2802      	cmp	r0, #2
 8000778:	d9f6      	bls.n	8000768 <HAL_RCC_OscConfig+0x1bc>
 800077a:	e77d      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800077c:	f7ff fdac 	bl	80002d8 <HAL_GetTick>
 8000780:	1b80      	subs	r0, r0, r6
 8000782:	2802      	cmp	r0, #2
 8000784:	f67f af35 	bls.w	80005f2 <HAL_RCC_OscConfig+0x46>
 8000788:	e776      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800078a:	f7ff fda5 	bl	80002d8 <HAL_GetTick>
 800078e:	1b80      	subs	r0, r0, r6
 8000790:	42b8      	cmp	r0, r7
 8000792:	f67f af3f 	bls.w	8000614 <HAL_RCC_OscConfig+0x68>
 8000796:	e76f      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
      tickstart = HAL_GetTick();
 8000798:	f7ff fd9e 	bl	80002d8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800079c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007a4:	0798      	lsls	r0, r3, #30
 80007a6:	f57f af39 	bpl.w	800061c <HAL_RCC_OscConfig+0x70>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007aa:	f7ff fd95 	bl	80002d8 <HAL_GetTick>
 80007ae:	1b80      	subs	r0, r0, r6
 80007b0:	42b8      	cmp	r0, r7
 80007b2:	d9f6      	bls.n	80007a2 <HAL_RCC_OscConfig+0x1f6>
 80007b4:	e760      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80007b6:	4d2c      	ldr	r5, [pc, #176]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
 80007b8:	68ab      	ldr	r3, [r5, #8]
 80007ba:	f003 030c 	and.w	r3, r3, #12
 80007be:	2b08      	cmp	r3, #8
 80007c0:	f43f af47 	beq.w	8000652 <HAL_RCC_OscConfig+0xa6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <HAL_RCC_OscConfig+0x2c4>)
 80007c6:	2a02      	cmp	r2, #2
 80007c8:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80007cc:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ce:	d13e      	bne.n	800084e <HAL_RCC_OscConfig+0x2a2>
        tickstart = HAL_GetTick();
 80007d0:	f7ff fd82 	bl	80002d8 <HAL_GetTick>
 80007d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007d6:	682b      	ldr	r3, [r5, #0]
 80007d8:	0199      	lsls	r1, r3, #6
 80007da:	d432      	bmi.n	8000842 <HAL_RCC_OscConfig+0x296>
 80007dc:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80007e0:	fa96 f6a6 	rbit	r6, r6
 80007e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007e8:	fab6 f686 	clz	r6, r6
 80007ec:	fa92 f2a2 	rbit	r2, r2
 80007f0:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80007f4:	fab2 f082 	clz	r0, r2
 80007f8:	fa91 f1a1 	rbit	r1, r1
 80007fc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000800:	4313      	orrs	r3, r2
 8000802:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000804:	40b2      	lsls	r2, r6
 8000806:	4313      	orrs	r3, r2
 8000808:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800080a:	0852      	lsrs	r2, r2, #1
 800080c:	3a01      	subs	r2, #1
 800080e:	4082      	lsls	r2, r0
 8000810:	4313      	orrs	r3, r2
 8000812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000814:	fab1 f181 	clz	r1, r1
 8000818:	fa02 f101 	lsl.w	r1, r2, r1
 800081c:	430b      	orrs	r3, r1
 800081e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_RCC_OscConfig+0x2c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000822:	4d11      	ldr	r5, [pc, #68]	; (8000868 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_PLL_ENABLE();
 8000824:	2201      	movs	r2, #1
 8000826:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000828:	f7ff fd56 	bl	80002d8 <HAL_GetTick>
 800082c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800082e:	682b      	ldr	r3, [r5, #0]
 8000830:	019a      	lsls	r2, r3, #6
 8000832:	f53f aef7 	bmi.w	8000624 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000836:	f7ff fd4f 	bl	80002d8 <HAL_GetTick>
 800083a:	1b00      	subs	r0, r0, r4
 800083c:	2802      	cmp	r0, #2
 800083e:	d9f6      	bls.n	800082e <HAL_RCC_OscConfig+0x282>
 8000840:	e71a      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000842:	f7ff fd49 	bl	80002d8 <HAL_GetTick>
 8000846:	1b80      	subs	r0, r0, r6
 8000848:	2802      	cmp	r0, #2
 800084a:	d9c4      	bls.n	80007d6 <HAL_RCC_OscConfig+0x22a>
 800084c:	e714      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 800084e:	f7ff fd43 	bl	80002d8 <HAL_GetTick>
 8000852:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	019b      	lsls	r3, r3, #6
 8000858:	f57f aee4 	bpl.w	8000624 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800085c:	f7ff fd3c 	bl	80002d8 <HAL_GetTick>
 8000860:	1b00      	subs	r0, r0, r4
 8000862:	2802      	cmp	r0, #2
 8000864:	d9f6      	bls.n	8000854 <HAL_RCC_OscConfig+0x2a8>
 8000866:	e707      	b.n	8000678 <HAL_RCC_OscConfig+0xcc>
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000
 8000870:	42470000 	.word	0x42470000

08000874 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_RCC_GetSysClockFreq+0x68>)
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	f002 020c 	and.w	r2, r2, #12
 800087c:	2a04      	cmp	r2, #4
 800087e:	d028      	beq.n	80008d2 <HAL_RCC_GetSysClockFreq+0x5e>
 8000880:	2a08      	cmp	r2, #8
 8000882:	d128      	bne.n	80008d6 <HAL_RCC_GetSysClockFreq+0x62>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000884:	685a      	ldr	r2, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000886:	6859      	ldr	r1, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000888:	6858      	ldr	r0, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800088a:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800088e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000892:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000896:	fa91 f3a1 	rbit	r3, r1
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800089a:	fab3 f383 	clz	r3, r3
 800089e:	ea00 0001 	and.w	r0, r0, r1
 80008a2:	fa20 f003 	lsr.w	r0, r0, r3
 80008a6:	bf14      	ite	ne
 80008a8:	4b0d      	ldrne	r3, [pc, #52]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008aa:	4b0e      	ldreq	r3, [pc, #56]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x70>)
 80008ac:	fbb3 f2f2 	udiv	r2, r3, r2
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_RCC_GetSysClockFreq+0x68>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008b2:	4350      	muls	r0, r2
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ba:	fa92 f2a2 	rbit	r2, r2
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008c6:	40d3      	lsrs	r3, r2
 80008c8:	3301      	adds	r3, #1
 80008ca:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 80008cc:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80008d0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80008d4:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	007a1200 	.word	0x007a1200
 80008e4:	00f42400 	.word	0x00f42400

080008e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e8:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <HAL_RCC_ClockConfig+0x158>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	f002 020f 	and.w	r2, r2, #15
 80008f0:	428a      	cmp	r2, r1
{
 80008f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008fa:	d32f      	bcc.n	800095c <HAL_RCC_ClockConfig+0x74>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008fc:	6822      	ldr	r2, [r4, #0]
 80008fe:	0796      	lsls	r6, r2, #30
 8000900:	d436      	bmi.n	8000970 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000902:	07d0      	lsls	r0, r2, #31
 8000904:	d43c      	bmi.n	8000980 <HAL_RCC_ClockConfig+0x98>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000906:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <HAL_RCC_ClockConfig+0x158>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	f002 020f 	and.w	r2, r2, #15
 800090e:	42aa      	cmp	r2, r5
 8000910:	f200 8086 	bhi.w	8000a20 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000914:	6822      	ldr	r2, [r4, #0]
 8000916:	0751      	lsls	r1, r2, #29
 8000918:	f100 808a 	bmi.w	8000a30 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800091c:	0713      	lsls	r3, r2, #28
 800091e:	d507      	bpl.n	8000930 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000920:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_RCC_ClockConfig+0x15c>)
 8000922:	6921      	ldr	r1, [r4, #16]
 8000924:	6893      	ldr	r3, [r2, #8]
 8000926:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800092a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800092e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000930:	f7ff ffa0 	bl	8000874 <HAL_RCC_GetSysClockFreq>
 8000934:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <HAL_RCC_ClockConfig+0x15c>)
 8000936:	22f0      	movs	r2, #240	; 0xf0
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	fa92 f2a2 	rbit	r2, r2
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000946:	40d3      	lsrs	r3, r2
 8000948:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <HAL_RCC_ClockConfig+0x160>)
 800094a:	5cd3      	ldrb	r3, [r2, r3]
 800094c:	40d8      	lsrs	r0, r3
 800094e:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <HAL_RCC_ClockConfig+0x164>)
 8000950:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fc88 	bl	8000268 <HAL_InitTick>
  return HAL_OK;
 8000958:	2000      	movs	r0, #0
 800095a:	e007      	b.n	800096c <HAL_RCC_ClockConfig+0x84>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800095c:	b2ca      	uxtb	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	428b      	cmp	r3, r1
 8000968:	d0c8      	beq.n	80008fc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800096a:	2001      	movs	r0, #1
}
 800096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000970:	4934      	ldr	r1, [pc, #208]	; (8000a44 <HAL_RCC_ClockConfig+0x15c>)
 8000972:	68a0      	ldr	r0, [r4, #8]
 8000974:	688b      	ldr	r3, [r1, #8]
 8000976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800097a:	4303      	orrs	r3, r0
 800097c:	608b      	str	r3, [r1, #8]
 800097e:	e7c0      	b.n	8000902 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000980:	6862      	ldr	r2, [r4, #4]
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <HAL_RCC_ClockConfig+0x15c>)
 8000984:	2a01      	cmp	r2, #1
 8000986:	d11d      	bne.n	80009c4 <HAL_RCC_ClockConfig+0xdc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098e:	d0ec      	beq.n	800096a <HAL_RCC_ClockConfig+0x82>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000990:	4e2c      	ldr	r6, [pc, #176]	; (8000a44 <HAL_RCC_ClockConfig+0x15c>)
 8000992:	68b3      	ldr	r3, [r6, #8]
 8000994:	f023 0303 	bic.w	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800099c:	f7ff fc9c 	bl	80002d8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80009a4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009aa:	d115      	bne.n	80009d8 <HAL_RCC_ClockConfig+0xf0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009ac:	68b3      	ldr	r3, [r6, #8]
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d0a7      	beq.n	8000906 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b6:	f7ff fc8f 	bl	80002d8 <HAL_GetTick>
 80009ba:	1bc0      	subs	r0, r0, r7
 80009bc:	4540      	cmp	r0, r8
 80009be:	d9f5      	bls.n	80009ac <HAL_RCC_ClockConfig+0xc4>
          return HAL_TIMEOUT;
 80009c0:	2003      	movs	r0, #3
 80009c2:	e7d3      	b.n	800096c <HAL_RCC_ClockConfig+0x84>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80009c4:	1e91      	subs	r1, r2, #2
 80009c6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80009ca:	d802      	bhi.n	80009d2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009d0:	e7dd      	b.n	800098e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d2:	f013 0f02 	tst.w	r3, #2
 80009d6:	e7da      	b.n	800098e <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d10a      	bne.n	80009f2 <HAL_RCC_ClockConfig+0x10a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009dc:	68b3      	ldr	r3, [r6, #8]
 80009de:	f003 030c 	and.w	r3, r3, #12
 80009e2:	2b08      	cmp	r3, #8
 80009e4:	d08f      	beq.n	8000906 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e6:	f7ff fc77 	bl	80002d8 <HAL_GetTick>
 80009ea:	1bc0      	subs	r0, r0, r7
 80009ec:	4540      	cmp	r0, r8
 80009ee:	d9f5      	bls.n	80009dc <HAL_RCC_ClockConfig+0xf4>
 80009f0:	e7e6      	b.n	80009c0 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d10f      	bne.n	8000a16 <HAL_RCC_ClockConfig+0x12e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009f6:	68b3      	ldr	r3, [r6, #8]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b0c      	cmp	r3, #12
 80009fe:	d082      	beq.n	8000906 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a00:	f7ff fc6a 	bl	80002d8 <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	4540      	cmp	r0, r8
 8000a08:	d9f5      	bls.n	80009f6 <HAL_RCC_ClockConfig+0x10e>
 8000a0a:	e7d9      	b.n	80009c0 <HAL_RCC_ClockConfig+0xd8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a0c:	f7ff fc64 	bl	80002d8 <HAL_GetTick>
 8000a10:	1bc0      	subs	r0, r0, r7
 8000a12:	4540      	cmp	r0, r8
 8000a14:	d8d4      	bhi.n	80009c0 <HAL_RCC_ClockConfig+0xd8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a16:	68b3      	ldr	r3, [r6, #8]
 8000a18:	f013 0f0c 	tst.w	r3, #12
 8000a1c:	d1f6      	bne.n	8000a0c <HAL_RCC_ClockConfig+0x124>
 8000a1e:	e772      	b.n	8000906 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a20:	b2ea      	uxtb	r2, r5
 8000a22:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	42ab      	cmp	r3, r5
 8000a2c:	d19d      	bne.n	800096a <HAL_RCC_ClockConfig+0x82>
 8000a2e:	e771      	b.n	8000914 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a30:	4904      	ldr	r1, [pc, #16]	; (8000a44 <HAL_RCC_ClockConfig+0x15c>)
 8000a32:	68e0      	ldr	r0, [r4, #12]
 8000a34:	688b      	ldr	r3, [r1, #8]
 8000a36:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a3a:	4303      	orrs	r3, r0
 8000a3c:	608b      	str	r3, [r1, #8]
 8000a3e:	e76d      	b.n	800091c <HAL_RCC_ClockConfig+0x34>
 8000a40:	40023c00 	.word	0x40023c00
 8000a44:	40023800 	.word	0x40023800
 8000a48:	0800190c 	.word	0x0800190c
 8000a4c:	20000000 	.word	0x20000000

08000a50 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000000 	.word	0x20000000

08000a5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000a5e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	fa92 f2a2 	rbit	r2, r2
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a70:	40d3      	lsrs	r3, r2
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000a78:	6810      	ldr	r0, [r2, #0]
}
 8000a7a:	40d8      	lsrs	r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	0800190c 	.word	0x0800190c
 8000a88:	20000000 	.word	0x20000000

08000a8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a8e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	fa92 f2a2 	rbit	r2, r2
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000aa0:	40d3      	lsrs	r3, r2
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000aa8:	6810      	ldr	r0, [r2, #0]
} 
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	0800190c 	.word	0x0800190c
 8000ab8:	20000000 	.word	0x20000000

08000abc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac0:	9f06      	ldr	r7, [sp, #24]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	4616      	mov	r6, r2
 8000ac8:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000aca:	6822      	ldr	r2, [r4, #0]
 8000acc:	6893      	ldr	r3, [r2, #8]
 8000ace:	ea38 0303 	bics.w	r3, r8, r3
 8000ad2:	bf0c      	ite	eq
 8000ad4:	2301      	moveq	r3, #1
 8000ad6:	2300      	movne	r3, #0
 8000ad8:	429e      	cmp	r6, r3
 8000ada:	d101      	bne.n	8000ae0 <SPI_WaitFlagStateUntilTimeout+0x24>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000adc:	2000      	movs	r0, #0
 8000ade:	e02b      	b.n	8000b38 <SPI_WaitFlagStateUntilTimeout+0x7c>
    if(Timeout != HAL_MAX_DELAY)
 8000ae0:	1c6b      	adds	r3, r5, #1
 8000ae2:	d0f3      	beq.n	8000acc <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000ae4:	bb55      	cbnz	r5, 8000b3c <SPI_WaitFlagStateUntilTimeout+0x80>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000aee:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000af0:	6862      	ldr	r2, [r4, #4]
 8000af2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000af6:	d10a      	bne.n	8000b0e <SPI_WaitFlagStateUntilTimeout+0x52>
 8000af8:	68a2      	ldr	r2, [r4, #8]
 8000afa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000afe:	d002      	beq.n	8000b06 <SPI_WaitFlagStateUntilTimeout+0x4a>
 8000b00:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000b04:	d103      	bne.n	8000b0e <SPI_WaitFlagStateUntilTimeout+0x52>
          __HAL_SPI_DISABLE(hspi);
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b0c:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000b14:	d109      	bne.n	8000b2a <SPI_WaitFlagStateUntilTimeout+0x6e>
          SPI_RESET_CRC(hspi);
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b1c:	0412      	lsls	r2, r2, #16
 8000b1e:	0c12      	lsrs	r2, r2, #16
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b28:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000b30:	2300      	movs	r3, #0
 8000b32:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000b36:	2003      	movs	r0, #3
}
 8000b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b3c:	f7ff fbcc 	bl	80002d8 <HAL_GetTick>
 8000b40:	1bc0      	subs	r0, r0, r7
 8000b42:	42a8      	cmp	r0, r5
 8000b44:	d3c1      	bcc.n	8000aca <SPI_WaitFlagStateUntilTimeout+0xe>
 8000b46:	e7ce      	b.n	8000ae6 <SPI_WaitFlagStateUntilTimeout+0x2a>

08000b48 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000b48:	b513      	push	{r0, r1, r4, lr}
 8000b4a:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b4c:	9200      	str	r2, [sp, #0]
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	2200      	movs	r2, #0
{
 8000b52:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b54:	f7ff ffb2 	bl	8000abc <SPI_WaitFlagStateUntilTimeout>
 8000b58:	b120      	cbz	r0, 8000b64 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000b5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000b62:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000b64:	b002      	add	sp, #8
 8000b66:	bd10      	pop	{r4, pc}

08000b68 <HAL_SPI_Init>:
{
 8000b68:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d036      	beq.n	8000bde <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000b74:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000b78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b7c:	b91b      	cbnz	r3, 8000b86 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000b7e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000b82:	f000 fe3d 	bl	8001800 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000b86:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b88:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000b90:	680b      	ldr	r3, [r1, #0]
 8000b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b96:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b98:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8000b9c:	4303      	orrs	r3, r0
 8000b9e:	68e0      	ldr	r0, [r4, #12]
 8000ba0:	4303      	orrs	r3, r0
 8000ba2:	6920      	ldr	r0, [r4, #16]
 8000ba4:	4303      	orrs	r3, r0
 8000ba6:	6960      	ldr	r0, [r4, #20]
 8000ba8:	4303      	orrs	r3, r0
 8000baa:	69e0      	ldr	r0, [r4, #28]
 8000bac:	4303      	orrs	r3, r0
 8000bae:	6a20      	ldr	r0, [r4, #32]
 8000bb0:	4303      	orrs	r3, r0
 8000bb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000bba:	4303      	orrs	r3, r0
 8000bbc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000bbe:	0c12      	lsrs	r2, r2, #16
 8000bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bc2:	f002 0204 	and.w	r2, r2, #4
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000bca:	69cb      	ldr	r3, [r1, #28]
 8000bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bd0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000bd2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000bd4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000bd6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000bd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8000bdc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
 8000be0:	e7fc      	b.n	8000bdc <HAL_SPI_Init+0x74>

08000be2 <HAL_SPI_Transmit>:
{
 8000be2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000be6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000be8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000bec:	2b01      	cmp	r3, #1
{
 8000bee:	b085      	sub	sp, #20
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000bf6:	f000 80a0 	beq.w	8000d3a <HAL_SPI_Transmit+0x158>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c00:	f7ff fb6a 	bl	80002d8 <HAL_GetTick>
  if(hspi->State != HAL_SPI_STATE_READY)
 8000c04:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000c08:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000c0a:	4680      	mov	r8, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000c0c:	b2df      	uxtb	r7, r3
 8000c0e:	f040 8092 	bne.w	8000d36 <HAL_SPI_Transmit+0x154>
  if((pData == NULL ) || (Size == 0U))
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d04f      	beq.n	8000cb6 <HAL_SPI_Transmit+0xd4>
 8000c16:	f1b9 0f00 	cmp.w	r9, #0
 8000c1a:	d04c      	beq.n	8000cb6 <HAL_SPI_Transmit+0xd4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c22:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000c24:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000c2a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8000c2e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000c32:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8000c34:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000c36:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8000c38:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000c3a:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000c42:	bf08      	it	eq
 8000c44:	681a      	ldreq	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c46:	68e1      	ldr	r1, [r4, #12]
    SPI_1LINE_TX(hspi);
 8000c48:	bf04      	itt	eq
 8000c4a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000c4e:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000c54:	bf5e      	ittt	pl
 8000c56:	681a      	ldrpl	r2, [r3, #0]
 8000c58:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000c5c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c5e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000c62:	6862      	ldr	r2, [r4, #4]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c64:	d13a      	bne.n	8000cdc <HAL_SPI_Transmit+0xfa>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000c66:	b11a      	cbz	r2, 8000c70 <HAL_SPI_Transmit+0x8e>
 8000c68:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	2a01      	cmp	r2, #1
 8000c6e:	d106      	bne.n	8000c7e <HAL_SPI_Transmit+0x9c>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000c70:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c74:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000c76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000c7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	b993      	cbnz	r3, 8000caa <HAL_SPI_Transmit+0xc8>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000c84:	f8cd 8000 	str.w	r8, [sp]
 8000c88:	4633      	mov	r3, r6
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f7ff ff14 	bl	8000abc <SPI_WaitFlagStateUntilTimeout>
 8000c94:	b970      	cbnz	r0, 8000cb4 <HAL_SPI_Transmit+0xd2>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000c96:	4642      	mov	r2, r8
 8000c98:	4631      	mov	r1, r6
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff ff54 	bl	8000b48 <SPI_CheckFlag_BSY>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d03a      	beq.n	8000d1a <HAL_SPI_Transmit+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8000ca8:	e005      	b.n	8000cb6 <HAL_SPI_Transmit+0xd4>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	0790      	lsls	r0, r2, #30
 8000cb0:	d4de      	bmi.n	8000c70 <HAL_SPI_Transmit+0x8e>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000cb2:	b956      	cbnz	r6, 8000cca <HAL_SPI_Transmit+0xe8>
          errorcode = HAL_TIMEOUT;
 8000cb4:	2703      	movs	r7, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	b005      	add	sp, #20
 8000cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000cca:	1c71      	adds	r1, r6, #1
 8000ccc:	d0d7      	beq.n	8000c7e <HAL_SPI_Transmit+0x9c>
 8000cce:	f7ff fb03 	bl	80002d8 <HAL_GetTick>
 8000cd2:	eba0 0008 	sub.w	r0, r0, r8
 8000cd6:	42b0      	cmp	r0, r6
 8000cd8:	d3d1      	bcc.n	8000c7e <HAL_SPI_Transmit+0x9c>
 8000cda:	e7eb      	b.n	8000cb4 <HAL_SPI_Transmit+0xd2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000cdc:	b11a      	cbz	r2, 8000ce6 <HAL_SPI_Transmit+0x104>
 8000cde:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000ce0:	b292      	uxth	r2, r2
 8000ce2:	2a01      	cmp	r2, #1
 8000ce4:	d106      	bne.n	8000cf4 <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000ce6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000cea:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000cec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000cf4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0c3      	beq.n	8000c84 <HAL_SPI_Transmit+0xa2>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	0792      	lsls	r2, r2, #30
 8000d02:	d4f0      	bmi.n	8000ce6 <HAL_SPI_Transmit+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0d5      	beq.n	8000cb4 <HAL_SPI_Transmit+0xd2>
 8000d08:	1c73      	adds	r3, r6, #1
 8000d0a:	d0f3      	beq.n	8000cf4 <HAL_SPI_Transmit+0x112>
 8000d0c:	f7ff fae4 	bl	80002d8 <HAL_GetTick>
 8000d10:	eba0 0008 	sub.w	r0, r0, r8
 8000d14:	42b0      	cmp	r0, r6
 8000d16:	d3ed      	bcc.n	8000cf4 <HAL_SPI_Transmit+0x112>
 8000d18:	e7cc      	b.n	8000cb4 <HAL_SPI_Transmit+0xd2>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d1a:	68a3      	ldr	r3, [r4, #8]
 8000d1c:	b933      	cbnz	r3, 8000d2c <HAL_SPI_Transmit+0x14a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	9203      	str	r2, [sp, #12]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	9303      	str	r3, [sp, #12]
 8000d2a:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000d2c:	6d67      	ldr	r7, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000d2e:	3f00      	subs	r7, #0
 8000d30:	bf18      	it	ne
 8000d32:	2701      	movne	r7, #1
error:
 8000d34:	e7bf      	b.n	8000cb6 <HAL_SPI_Transmit+0xd4>
    errorcode = HAL_BUSY;
 8000d36:	2702      	movs	r7, #2
 8000d38:	e7bd      	b.n	8000cb6 <HAL_SPI_Transmit+0xd4>
  __HAL_LOCK(hspi);
 8000d3a:	2702      	movs	r7, #2
 8000d3c:	e7c1      	b.n	8000cc2 <HAL_SPI_Transmit+0xe0>

08000d3e <HAL_SPI_TransmitReceive>:
{
 8000d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d42:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8000d44:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000d48:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000d4a:	2b01      	cmp	r3, #1
{
 8000d4c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8000d50:	4604      	mov	r4, r0
 8000d52:	460d      	mov	r5, r1
 8000d54:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8000d56:	f000 80e2 	beq.w	8000f1e <HAL_SPI_TransmitReceive+0x1e0>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000d60:	f7ff faba 	bl	80002d8 <HAL_GetTick>
  tmp  = hspi->State;
 8000d64:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8000d68:	6862      	ldr	r2, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000d6a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000d6c:	4681      	mov	r9, r0
  tmp  = hspi->State;
 8000d6e:	b2d9      	uxtb	r1, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000d70:	d00a      	beq.n	8000d88 <HAL_SPI_TransmitReceive+0x4a>
 8000d72:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000d76:	f040 80d0 	bne.w	8000f1a <HAL_SPI_TransmitReceive+0x1dc>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000d7a:	68a3      	ldr	r3, [r4, #8]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f040 80cc 	bne.w	8000f1a <HAL_SPI_TransmitReceive+0x1dc>
 8000d82:	2904      	cmp	r1, #4
 8000d84:	f040 80c9 	bne.w	8000f1a <HAL_SPI_TransmitReceive+0x1dc>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d048      	beq.n	8000e1e <HAL_SPI_TransmitReceive+0xe0>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d046      	beq.n	8000e1e <HAL_SPI_TransmitReceive+0xe0>
 8000d90:	2f00      	cmp	r7, #0
 8000d92:	d044      	beq.n	8000e1e <HAL_SPI_TransmitReceive+0xe0>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000d94:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000d98:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000d9a:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000d9c:	bf04      	itt	eq
 8000d9e:	2305      	moveq	r3, #5
 8000da0:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8000da8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000dac:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000dae:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000db0:	86e7      	strh	r7, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000db2:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8000db4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000db6:	0648      	lsls	r0, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8000db8:	bf58      	it	pl
 8000dba:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000dbc:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000dbe:	bf58      	it	pl
 8000dc0:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000dc4:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000dc6:	bf58      	it	pl
 8000dc8:	6019      	strpl	r1, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000dca:	68e1      	ldr	r1, [r4, #12]
 8000dcc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000dd0:	d15a      	bne.n	8000e88 <HAL_SPI_TransmitReceive+0x14a>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000dd2:	b11a      	cbz	r2, 8000ddc <HAL_SPI_TransmitReceive+0x9e>
 8000dd4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	d106      	bne.n	8000dea <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000ddc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000de0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000de2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000dea:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000dec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b9bb      	cbnz	r3, 8000e22 <HAL_SPI_TransmitReceive+0xe4>
 8000df2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b9a3      	cbnz	r3, 8000e22 <HAL_SPI_TransmitReceive+0xe4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000df8:	f8cd 9000 	str.w	r9, [sp]
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2102      	movs	r1, #2
 8000e02:	4620      	mov	r0, r4
 8000e04:	f7ff fe5a 	bl	8000abc <SPI_WaitFlagStateUntilTimeout>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d133      	bne.n	8000e74 <HAL_SPI_TransmitReceive+0x136>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000e0c:	464a      	mov	r2, r9
 8000e0e:	4641      	mov	r1, r8
 8000e10:	4620      	mov	r0, r4
 8000e12:	f7ff fe99 	bl	8000b48 <SPI_CheckFlag_BSY>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d074      	beq.n	8000f04 <HAL_SPI_TransmitReceive+0x1c6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000e1e:	2001      	movs	r0, #1
 8000e20:	e029      	b.n	8000e76 <HAL_SPI_TransmitReceive+0x138>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000e22:	b177      	cbz	r7, 8000e42 <HAL_SPI_TransmitReceive+0x104>
 8000e24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b15b      	cbz	r3, 8000e42 <HAL_SPI_TransmitReceive+0x104>
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	0791      	lsls	r1, r2, #30
 8000e30:	d507      	bpl.n	8000e42 <HAL_SPI_TransmitReceive+0x104>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000e32:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000e36:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000e38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8000e40:	2700      	movs	r7, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000e42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b163      	cbz	r3, 8000e62 <HAL_SPI_TransmitReceive+0x124>
 8000e48:	6821      	ldr	r1, [r4, #0]
 8000e4a:	688a      	ldr	r2, [r1, #8]
 8000e4c:	f012 0201 	ands.w	r2, r2, #1
 8000e50:	d007      	beq.n	8000e62 <HAL_SPI_TransmitReceive+0x124>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000e52:	68cb      	ldr	r3, [r1, #12]
 8000e54:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000e58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8000e60:	4617      	mov	r7, r2
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000e62:	f1b8 3fff 	cmp.w	r8, #4294967295
 8000e66:	d0c1      	beq.n	8000dec <HAL_SPI_TransmitReceive+0xae>
 8000e68:	f7ff fa36 	bl	80002d8 <HAL_GetTick>
 8000e6c:	eba0 0009 	sub.w	r0, r0, r9
 8000e70:	4540      	cmp	r0, r8
 8000e72:	d3bb      	bcc.n	8000dec <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8000e74:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000e82:	b005      	add	sp, #20
 8000e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000e88:	b11a      	cbz	r2, 8000e92 <HAL_SPI_TransmitReceive+0x154>
 8000e8a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	2a01      	cmp	r2, #1
 8000e90:	d106      	bne.n	8000ea0 <HAL_SPI_TransmitReceive+0x162>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000e92:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000e96:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000e98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	86e3      	strh	r3, [r4, #54]	; 0x36
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000ea0:	2701      	movs	r7, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ea2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b91b      	cbnz	r3, 8000eb0 <HAL_SPI_TransmitReceive+0x172>
 8000ea8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0a3      	beq.n	8000df8 <HAL_SPI_TransmitReceive+0xba>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000eb0:	b177      	cbz	r7, 8000ed0 <HAL_SPI_TransmitReceive+0x192>
 8000eb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b15b      	cbz	r3, 8000ed0 <HAL_SPI_TransmitReceive+0x192>
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	0792      	lsls	r2, r2, #30
 8000ebe:	d507      	bpl.n	8000ed0 <HAL_SPI_TransmitReceive+0x192>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000ec0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000ec4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000ec6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8000ece:	2700      	movs	r7, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000ed0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b163      	cbz	r3, 8000ef0 <HAL_SPI_TransmitReceive+0x1b2>
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	6891      	ldr	r1, [r2, #8]
 8000eda:	f011 0101 	ands.w	r1, r1, #1
 8000ede:	d007      	beq.n	8000ef0 <HAL_SPI_TransmitReceive+0x1b2>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000ee0:	68d3      	ldr	r3, [r2, #12]
 8000ee2:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 8000ee6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8000eee:	460f      	mov	r7, r1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000ef0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8000ef4:	d0d5      	beq.n	8000ea2 <HAL_SPI_TransmitReceive+0x164>
 8000ef6:	f7ff f9ef 	bl	80002d8 <HAL_GetTick>
 8000efa:	eba0 0009 	sub.w	r0, r0, r9
 8000efe:	4540      	cmp	r0, r8
 8000f00:	d3cf      	bcc.n	8000ea2 <HAL_SPI_TransmitReceive+0x164>
 8000f02:	e7b7      	b.n	8000e74 <HAL_SPI_TransmitReceive+0x136>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000f04:	68a3      	ldr	r3, [r4, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1b5      	bne.n	8000e76 <HAL_SPI_TransmitReceive+0x138>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	9003      	str	r0, [sp, #12]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	9203      	str	r2, [sp, #12]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	9303      	str	r3, [sp, #12]
 8000f16:	9b03      	ldr	r3, [sp, #12]
 8000f18:	e7ad      	b.n	8000e76 <HAL_SPI_TransmitReceive+0x138>
    errorcode = HAL_BUSY;
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	e7ab      	b.n	8000e76 <HAL_SPI_TransmitReceive+0x138>
  __HAL_LOCK(hspi);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	e7af      	b.n	8000e82 <HAL_SPI_TransmitReceive+0x144>

08000f22 <HAL_SPI_Receive>:
{
 8000f22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f26:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000f28:	6843      	ldr	r3, [r0, #4]
 8000f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8000f2e:	4604      	mov	r4, r0
 8000f30:	460d      	mov	r5, r1
 8000f32:	4617      	mov	r7, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000f34:	d10c      	bne.n	8000f50 <HAL_SPI_Receive+0x2e>
 8000f36:	6883      	ldr	r3, [r0, #8]
 8000f38:	b953      	cbnz	r3, 8000f50 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8000f40:	4613      	mov	r3, r2
 8000f42:	9600      	str	r6, [sp, #0]
 8000f44:	460a      	mov	r2, r1
 8000f46:	f7ff fefa 	bl	8000d3e <HAL_SPI_TransmitReceive>
}
 8000f4a:	b002      	add	sp, #8
 8000f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8000f50:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f000 8082 	beq.w	800105e <HAL_SPI_Receive+0x13c>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f60:	f7ff f9ba 	bl	80002d8 <HAL_GetTick>
  if(hspi->State != HAL_SPI_STATE_READY)
 8000f64:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000f68:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f6a:	4680      	mov	r8, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000f6c:	b2d8      	uxtb	r0, r3
 8000f6e:	d174      	bne.n	800105a <HAL_SPI_Receive+0x138>
  if((pData == NULL ) || (Size == 0U))
 8000f70:	2d00      	cmp	r5, #0
 8000f72:	d057      	beq.n	8001024 <HAL_SPI_Receive+0x102>
 8000f74:	2f00      	cmp	r7, #0
 8000f76:	d055      	beq.n	8001024 <HAL_SPI_Receive+0x102>
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f78:	68a2      	ldr	r2, [r4, #8]
  hspi->RxXferSize  = Size;
 8000f7a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f82:	2100      	movs	r1, #0
    SPI_1LINE_RX(hspi);
 8000f84:	6823      	ldr	r3, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f86:	6561      	str	r1, [r4, #84]	; 0x54
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f88:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxXferCount = Size;
 8000f8c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8000f8e:	86e1      	strh	r1, [r4, #54]	; 0x36
    SPI_1LINE_RX(hspi);
 8000f90:	bf08      	it	eq
 8000f92:	681a      	ldreq	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8000f94:	63a5      	str	r5, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8000f96:	bf08      	it	eq
 8000f98:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
  hspi->TxISR       = NULL;
 8000f9c:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8000fa0:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8000fa2:	86a1      	strh	r1, [r4, #52]	; 0x34
    SPI_1LINE_RX(hspi);
 8000fa4:	bf08      	it	eq
 8000fa6:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000fac:	bf5e      	ittt	pl
 8000fae:	681a      	ldrpl	r2, [r3, #0]
 8000fb0:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000fb4:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000fb6:	68e3      	ldr	r3, [r4, #12]
 8000fb8:	b1cb      	cbz	r3, 8000fee <HAL_SPI_Receive+0xcc>
    while(hspi->RxXferCount > 0U)
 8000fba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b1d3      	cbz	r3, 8000ff6 <HAL_SPI_Receive+0xd4>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	07d2      	lsls	r2, r2, #31
 8000fc6:	d53d      	bpl.n	8001044 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8000fce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000fd6:	e7f0      	b.n	8000fba <HAL_SPI_Receive+0x98>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	07d0      	lsls	r0, r2, #31
 8000fde:	d51f      	bpl.n	8001020 <HAL_SPI_Receive+0xfe>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8000fe0:	7b1b      	ldrb	r3, [r3, #12]
 8000fe2:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8000fe6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8000fee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_SPI_Receive+0xb6>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ff6:	6863      	ldr	r3, [r4, #4]
 8000ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ffc:	d10b      	bne.n	8001016 <HAL_SPI_Receive+0xf4>
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001004:	d002      	beq.n	800100c <HAL_SPI_Receive+0xea>
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100a:	d104      	bne.n	8001016 <HAL_SPI_Receive+0xf4>
    __HAL_SPI_DISABLE(hspi);
 800100c:	6822      	ldr	r2, [r4, #0]
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001014:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001016:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001018:	3800      	subs	r0, #0
 800101a:	bf18      	it	ne
 800101c:	2001      	movne	r0, #1
error :
 800101e:	e001      	b.n	8001024 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001020:	b93e      	cbnz	r6, 8001032 <HAL_SPI_Receive+0x110>
          errorcode = HAL_TIMEOUT;
 8001022:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001024:	2301      	movs	r3, #1
 8001026:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800102a:	2300      	movs	r3, #0
 800102c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001030:	e78b      	b.n	8000f4a <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001032:	1c71      	adds	r1, r6, #1
 8001034:	d0db      	beq.n	8000fee <HAL_SPI_Receive+0xcc>
 8001036:	f7ff f94f 	bl	80002d8 <HAL_GetTick>
 800103a:	eba0 0008 	sub.w	r0, r0, r8
 800103e:	42b0      	cmp	r0, r6
 8001040:	d3d5      	bcc.n	8000fee <HAL_SPI_Receive+0xcc>
 8001042:	e7ee      	b.n	8001022 <HAL_SPI_Receive+0x100>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001044:	2e00      	cmp	r6, #0
 8001046:	d0ec      	beq.n	8001022 <HAL_SPI_Receive+0x100>
 8001048:	1c73      	adds	r3, r6, #1
 800104a:	d0b6      	beq.n	8000fba <HAL_SPI_Receive+0x98>
 800104c:	f7ff f944 	bl	80002d8 <HAL_GetTick>
 8001050:	eba0 0008 	sub.w	r0, r0, r8
 8001054:	42b0      	cmp	r0, r6
 8001056:	d3b0      	bcc.n	8000fba <HAL_SPI_Receive+0x98>
 8001058:	e7e3      	b.n	8001022 <HAL_SPI_Receive+0x100>
    errorcode = HAL_BUSY;
 800105a:	2002      	movs	r0, #2
 800105c:	e7e2      	b.n	8001024 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 800105e:	2002      	movs	r0, #2
 8001060:	e773      	b.n	8000f4a <HAL_SPI_Receive+0x28>
	...

08001064 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001068:	6803      	ldr	r3, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800106a:	68c1      	ldr	r1, [r0, #12]
  tmpreg = huart->Instance->CR2;
 800106c:	691a      	ldr	r2, [r3, #16]
{
 800106e:	4604      	mov	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001070:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001074:	430a      	orrs	r2, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001076:	611a      	str	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001078:	6925      	ldr	r5, [r4, #16]
 800107a:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 800107c:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800107e:	69c0      	ldr	r0, [r0, #28]
 8001080:	432a      	orrs	r2, r5
 8001082:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001084:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001088:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800108a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800108e:	4302      	orrs	r2, r0
 8001090:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001092:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001094:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001096:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800109c:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800109e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80010a2:	615a      	str	r2, [r3, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010a4:	4a83      	ldr	r2, [pc, #524]	; (80012b4 <UART_SetConfig+0x250>)
 80010a6:	f040 8085 	bne.w	80011b4 <UART_SetConfig+0x150>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d003      	beq.n	80010b6 <UART_SetConfig+0x52>
 80010ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d149      	bne.n	800114a <UART_SetConfig+0xe6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010b6:	f7ff fce9 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	f04f 0919 	mov.w	r9, #25
 80010c0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80010c4:	fb09 f000 	mul.w	r0, r9, r0
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80010d2:	011f      	lsls	r7, r3, #4
 80010d4:	f7ff fcda 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 80010d8:	6865      	ldr	r5, [r4, #4]
 80010da:	fb09 f000 	mul.w	r0, r9, r0
 80010de:	006d      	lsls	r5, r5, #1
 80010e0:	fbb0 f5f5 	udiv	r5, r0, r5
 80010e4:	f7ff fcd2 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 80010e8:	6866      	ldr	r6, [r4, #4]
 80010ea:	fb09 f000 	mul.w	r0, r9, r0
 80010ee:	0076      	lsls	r6, r6, #1
 80010f0:	fbb0 f6f6 	udiv	r6, r0, r6
 80010f4:	f7ff fcca 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 80010f8:	fbb6 f6f8 	udiv	r6, r6, r8
 80010fc:	fb08 5616 	mls	r6, r8, r6, r5
 8001100:	6863      	ldr	r3, [r4, #4]
 8001102:	00f6      	lsls	r6, r6, #3
 8001104:	3632      	adds	r6, #50	; 0x32
 8001106:	fbb6 f6f8 	udiv	r6, r6, r8
 800110a:	0076      	lsls	r6, r6, #1
 800110c:	fb09 f000 	mul.w	r0, r9, r0
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001116:	fbb0 f5f3 	udiv	r5, r0, r3
 800111a:	f7ff fcb7 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	6822      	ldr	r2, [r4, #0]
 8001122:	fb09 f000 	mul.w	r0, r9, r0
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fbb0 f3f3 	udiv	r3, r0, r3
 800112c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001130:	fb08 5313 	mls	r3, r8, r3, r5
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	3332      	adds	r3, #50	; 0x32
 8001138:	fbb3 f3f8 	udiv	r3, r3, r8
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	443b      	add	r3, r7
 8001142:	4433      	add	r3, r6
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001144:	6093      	str	r3, [r2, #8]
    }
  }
}
 8001146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800114a:	f7ff fc87 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	f04f 0919 	mov.w	r9, #25
 8001154:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001158:	fb09 f000 	mul.w	r0, r9, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001162:	fbb3 f3f8 	udiv	r3, r3, r8
 8001166:	011f      	lsls	r7, r3, #4
 8001168:	f7ff fc78 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 800116c:	6865      	ldr	r5, [r4, #4]
 800116e:	fb09 f000 	mul.w	r0, r9, r0
 8001172:	006d      	lsls	r5, r5, #1
 8001174:	fbb0 f5f5 	udiv	r5, r0, r5
 8001178:	f7ff fc70 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 800117c:	6866      	ldr	r6, [r4, #4]
 800117e:	fb09 f000 	mul.w	r0, r9, r0
 8001182:	0076      	lsls	r6, r6, #1
 8001184:	fbb0 f6f6 	udiv	r6, r0, r6
 8001188:	f7ff fc68 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 800118c:	fbb6 f6f8 	udiv	r6, r6, r8
 8001190:	fb08 5616 	mls	r6, r8, r6, r5
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	00f6      	lsls	r6, r6, #3
 8001198:	3632      	adds	r6, #50	; 0x32
 800119a:	fbb6 f6f8 	udiv	r6, r6, r8
 800119e:	0076      	lsls	r6, r6, #1
 80011a0:	fb09 f000 	mul.w	r0, r9, r0
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80011aa:	fbb0 f5f3 	udiv	r5, r0, r3
 80011ae:	f7ff fc55 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 80011b2:	e7b4      	b.n	800111e <UART_SetConfig+0xba>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d002      	beq.n	80011be <UART_SetConfig+0x15a>
 80011b8:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <UART_SetConfig+0x254>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d146      	bne.n	800124c <UART_SetConfig+0x1e8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011be:	f7ff fc65 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 80011c2:	6863      	ldr	r3, [r4, #4]
 80011c4:	f04f 0919 	mov.w	r9, #25
 80011c8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011cc:	fb09 f000 	mul.w	r0, r9, r0
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d6:	fbb3 f3f8 	udiv	r3, r3, r8
 80011da:	011f      	lsls	r7, r3, #4
 80011dc:	f7ff fc56 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 80011e0:	6865      	ldr	r5, [r4, #4]
 80011e2:	fb09 f000 	mul.w	r0, r9, r0
 80011e6:	00ad      	lsls	r5, r5, #2
 80011e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80011ec:	f7ff fc4e 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	fb09 f000 	mul.w	r0, r9, r0
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001200:	fb08 5313 	mls	r3, r8, r3, r5
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	3332      	adds	r3, #50	; 0x32
 8001208:	fbb3 f3f8 	udiv	r3, r3, r8
 800120c:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001210:	f7ff fc3c 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	fb09 f000 	mul.w	r0, r9, r0
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fbb0 f5f3 	udiv	r5, r0, r3
 8001220:	f7ff fc34 	bl	8000a8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	6822      	ldr	r2, [r4, #0]
 8001228:	fb09 f000 	mul.w	r0, r9, r0
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001232:	fbb3 f3f8 	udiv	r3, r3, r8
 8001236:	fb08 5313 	mls	r3, r8, r3, r5
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	3332      	adds	r3, #50	; 0x32
 800123e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4333      	orrs	r3, r6
 8001248:	443b      	add	r3, r7
 800124a:	e77b      	b.n	8001144 <UART_SetConfig+0xe0>
 800124c:	f7ff fc06 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 8001250:	6863      	ldr	r3, [r4, #4]
 8001252:	f04f 0919 	mov.w	r9, #25
 8001256:	f04f 0864 	mov.w	r8, #100	; 0x64
 800125a:	fb09 f000 	mul.w	r0, r9, r0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fbb0 f3f3 	udiv	r3, r0, r3
 8001264:	fbb3 f3f8 	udiv	r3, r3, r8
 8001268:	011f      	lsls	r7, r3, #4
 800126a:	f7ff fbf7 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 800126e:	6865      	ldr	r5, [r4, #4]
 8001270:	fb09 f000 	mul.w	r0, r9, r0
 8001274:	00ad      	lsls	r5, r5, #2
 8001276:	fbb0 f5f5 	udiv	r5, r0, r5
 800127a:	f7ff fbef 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 800127e:	6863      	ldr	r3, [r4, #4]
 8001280:	fb09 f000 	mul.w	r0, r9, r0
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	fbb3 f3f8 	udiv	r3, r3, r8
 800128e:	fb08 5313 	mls	r3, r8, r3, r5
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	3332      	adds	r3, #50	; 0x32
 8001296:	fbb3 f3f8 	udiv	r3, r3, r8
 800129a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800129e:	f7ff fbdd 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	fb09 f000 	mul.w	r0, r9, r0
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fbb0 f5f3 	udiv	r5, r0, r3
 80012ae:	f7ff fbd5 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 80012b2:	e7b7      	b.n	8001224 <UART_SetConfig+0x1c0>
 80012b4:	40011000 	.word	0x40011000
 80012b8:	40011400 	.word	0x40011400

080012bc <HAL_UART_Init>:
{
 80012bc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012be:	4604      	mov	r4, r0
 80012c0:	b340      	cbz	r0, 8001314 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80012c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012ca:	b91b      	cbnz	r3, 80012d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012d0:	f000 fabc 	bl	800184c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012d6:	2324      	movs	r3, #36	; 0x24
 80012d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80012dc:	68d3      	ldr	r3, [r2, #12]
 80012de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012e2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff febd 	bl	8001064 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012fa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001302:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001304:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001306:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001308:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800130a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800130e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001312:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001314:	2001      	movs	r0, #1
 8001316:	e7fc      	b.n	8001312 <HAL_UART_Init+0x56>

08001318 <SystemClock_Config>:

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8001318:	b530      	push	{r4, r5, lr}
 800131a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800131c:	2300      	movs	r3, #0
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <SystemClock_Config+0xa4>)
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001324:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001328:	6411      	str	r1, [r2, #64]	; 0x40
 800132a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800132c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9a01      	ldr	r2, [sp, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <SystemClock_Config+0xa8>)
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	6811      	ldr	r1, [r2, #0]
 800133a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800133e:	6011      	str	r1, [r2, #0]
 8001340:	6812      	ldr	r2, [r2, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001342:	2402      	movs	r4, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001344:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134c:	9202      	str	r2, [sp, #8]
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 50;
 800134e:	2008      	movs	r0, #8
 8001350:	2332      	movs	r3, #50	; 0x32
 8001352:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001356:	2101      	movs	r1, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001358:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135a:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800135c:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800135e:	2307      	movs	r3, #7
 8001360:	2504      	movs	r5, #4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001362:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001364:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001368:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800136c:	f7ff f91e 	bl	80005ac <HAL_RCC_OscConfig>
 8001370:	4601      	mov	r1, r0
 8001372:	b100      	cbz	r0, 8001376 <SystemClock_Config+0x5e>
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001374:	e7fe      	b.n	8001374 <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	e9cd 3403 	strd	r3, r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800137e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001386:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001388:	e9cd 2306 	strd	r2, r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800138c:	f7ff faac 	bl	80008e8 <HAL_RCC_ClockConfig>
 8001390:	4604      	mov	r4, r0
 8001392:	b100      	cbz	r0, 8001396 <SystemClock_Config+0x7e>
	while (1) {
 8001394:	e7fe      	b.n	8001394 <SystemClock_Config+0x7c>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001396:	f7ff fb5b 	bl	8000a50 <HAL_RCC_GetHCLKFreq>
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a2:	f7fe fff1 	bl	8000388 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013a6:	4628      	mov	r0, r5
 80013a8:	f7ff f802 	bl	80003b0 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013ac:	4622      	mov	r2, r4
 80013ae:	4621      	mov	r1, r4
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7fe ffb6 	bl	8000324 <HAL_NVIC_SetPriority>
}
 80013b8:	b015      	add	sp, #84	; 0x54
 80013ba:	bd30      	pop	{r4, r5, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <main>:
int main(void) {
 80013c4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80013c8:	b08d      	sub	sp, #52	; 0x34
	__HAL_RCC_GPIOE_CLK_ENABLE()
 80013ca:	2400      	movs	r4, #0
	HAL_Init();
 80013cc:	f7fe ff62 	bl	8000294 <HAL_Init>
	SystemClock_Config();
 80013d0:	f7ff ffa2 	bl	8001318 <SystemClock_Config>
	__HAL_RCC_GPIOE_CLK_ENABLE()
 80013d4:	4b84      	ldr	r3, [pc, #528]	; (80015e8 <main+0x224>)
 80013d6:	9401      	str	r4, [sp, #4]
 80013d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013da:	4884      	ldr	r0, [pc, #528]	; (80015ec <main+0x228>)
	__HAL_RCC_GPIOE_CLK_ENABLE()
 80013dc:	f042 0210 	orr.w	r2, r2, #16
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
 80013e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e4:	f002 0210 	and.w	r2, r2, #16
 80013e8:	9201      	str	r2, [sp, #4]
 80013ea:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f0:	f042 0204 	orr.w	r2, r2, #4
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f002 0204 	and.w	r2, r2, #4
 80013fc:	9202      	str	r2, [sp, #8]
 80013fe:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8001400:	9403      	str	r4, [sp, #12]
 8001402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001410:	9203      	str	r2, [sp, #12]
 8001412:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001414:	9404      	str	r4, [sp, #16]
 8001416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
 800141e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001420:	f002 0201 	and.w	r2, r2, #1
 8001424:	9204      	str	r2, [sp, #16]
 8001426:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001428:	9405      	str	r4, [sp, #20]
 800142a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142c:	f042 0202 	orr.w	r2, r2, #2
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
 8001432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001434:	f002 0202 	and.w	r2, r2, #2
 8001438:	9205      	str	r2, [sp, #20]
 800143a:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800143c:	9406      	str	r4, [sp, #24]
 800143e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001440:	f042 0208 	orr.w	r2, r2, #8
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	9306      	str	r3, [sp, #24]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800144e:	4622      	mov	r2, r4
 8001450:	2108      	movs	r1, #8
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001452:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001454:	f7ff f8a4 	bl	80005a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001458:	2201      	movs	r2, #1
 800145a:	4611      	mov	r1, r2
 800145c:	4864      	ldr	r0, [pc, #400]	; (80015f0 <main+0x22c>)
 800145e:	f7ff f89f 	bl	80005a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,
 8001462:	4622      	mov	r2, r4
 8001464:	4863      	ldr	r0, [pc, #396]	; (80015f4 <main+0x230>)
 8001466:	f24f 0110 	movw	r1, #61456	; 0xf010
 800146a:	f7ff f899 	bl	80005a0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2601      	movs	r6, #1
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001470:	485e      	ldr	r0, [pc, #376]	; (80015ec <main+0x228>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2708      	movs	r7, #8
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001474:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	e9cd 7607 	strd	r7, r6, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800147e:	f7fe ffa7 	bl	80003d0 <HAL_GPIO_Init>
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001482:	485b      	ldr	r0, [pc, #364]	; (80015f0 <main+0x22c>)
 8001484:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2502      	movs	r5, #2
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001488:	f04f 0905 	mov.w	r9, #5
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	e9cd 6607 	strd	r6, r6, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001494:	f7fe ff9c 	bl	80003d0 <HAL_GPIO_Init>
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001498:	4855      	ldr	r0, [pc, #340]	; (80015f0 <main+0x22c>)
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800149e:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014a0:	f04f 0806 	mov.w	r8, #6
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	e9cd 5408 	strd	r5, r4, [sp, #32]
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014a8:	9707      	str	r7, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f7fe ff90 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b0:	2310      	movs	r3, #16
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	4851      	ldr	r0, [pc, #324]	; (80015f8 <main+0x234>)
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	e9cd 3507 	strd	r3, r5, [sp, #28]
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80014be:	f04f 0b04 	mov.w	fp, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f7fe ff83 	bl	80003d0 <HAL_GPIO_Init>
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014ca:	484c      	ldr	r0, [pc, #304]	; (80015fc <main+0x238>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014ce:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	e9cd b407 	strd	fp, r4, [sp, #28]
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f7fe ff7c 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014dc:	4847      	ldr	r0, [pc, #284]	; (80015fc <main+0x238>)
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014de:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014e2:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	e9cd 3507 	strd	r3, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f7fe ff70 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80014f0:	f24f 0310 	movw	r3, #61456	; 0xf010
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	483f      	ldr	r0, [pc, #252]	; (80015f4 <main+0x230>)
 80014f6:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	e9cd 3607 	strd	r3, r6, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001500:	f7fe ff66 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_7 | I2S3_SCK_Pin | GPIO_PIN_12;
 8001504:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	4839      	ldr	r0, [pc, #228]	; (80015f0 <main+0x22c>)
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800150a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	e9cd 3507 	strd	r3, r5, [sp, #28]
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001514:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f7fe ff58 	bl	80003d0 <HAL_GPIO_Init>
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001520:	4835      	ldr	r0, [pc, #212]	; (80015f8 <main+0x234>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001524:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001526:	f04f 090a 	mov.w	r9, #10
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	e9cd a407 	strd	sl, r4, [sp, #28]
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800152e:	f7fe ff4f 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8001532:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	4830      	ldr	r0, [pc, #192]	; (80015f8 <main+0x234>)
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001538:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	e9cd 3507 	strd	r3, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001546:	f04f 0820 	mov.w	r8, #32
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f7fe ff41 	bl	80003d0 <HAL_GPIO_Init>
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800154e:	4829      	ldr	r0, [pc, #164]	; (80015f4 <main+0x230>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001552:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	e9cd 8407 	strd	r8, r4, [sp, #28]
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001558:	f7fe ff3a 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155c:	2312      	movs	r3, #18
 800155e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001562:	e9cd 1307 	strd	r1, r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	4825      	ldr	r0, [pc, #148]	; (80015fc <main+0x238>)
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001568:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f7fe ff2d 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <main+0x23c>)
	HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <main+0x228>)
	GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 800157a:	9607      	str	r6, [sp, #28]
	HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 800157c:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	e9cd 3408 	strd	r3, r4, [sp, #32]
	HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 8001582:	f7fe ff25 	bl	80003d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <main+0x240>)
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <main+0x228>)
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800158a:	9507      	str	r5, [sp, #28]
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800158c:	a907      	add	r1, sp, #28
	hspi1.Instance = SPI1;
 800158e:	4d1e      	ldr	r5, [pc, #120]	; (8001608 <main+0x244>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	e9cd 3408 	strd	r3, r4, [sp, #32]
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001594:	f7fe ff1c 	bl	80003d0 <HAL_GPIO_Init>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001598:	481c      	ldr	r0, [pc, #112]	; (800160c <main+0x248>)
 800159a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800159e:	e9c5 0300 	strd	r0, r3, [r5]
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80015a2:	4628      	mov	r0, r5
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a4:	e9c5 4402 	strd	r4, r4, [r5, #8]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ac:	e9c5 a406 	strd	sl, r4, [r5, #24]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b0:	e9c5 4408 	strd	r4, r4, [r5, #32]
	hspi1.Init.CRCPolynomial = 10;
 80015b4:	e9c5 490a 	strd	r4, r9, [r5, #40]	; 0x28
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80015b8:	f7ff fad6 	bl	8000b68 <HAL_SPI_Init>
 80015bc:	b100      	cbz	r0, 80015c0 <main+0x1fc>
	while (1) {
 80015be:	e7fe      	b.n	80015be <main+0x1fa>
	huart2.Init.BaudRate = 115200;
 80015c0:	4a13      	ldr	r2, [pc, #76]	; (8001610 <main+0x24c>)
	huart2.Init.Parity = UART_PARITY_NONE;
 80015c2:	66a8      	str	r0, [r5, #104]	; 0x68
	huart2.Init.BaudRate = 115200;
 80015c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015c8:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
	huart2.Init.Mode = UART_MODE_TX_RX;
 80015cc:	230c      	movs	r3, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 80015ce:	e9c5 0018 	strd	r0, r0, [r5, #96]	; 0x60
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d6:	6768      	str	r0, [r5, #116]	; 0x74
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80015d8:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80015dc:	f7ff fe6e 	bl	80012bc <HAL_UART_Init>
 80015e0:	4602      	mov	r2, r0
 80015e2:	b1b8      	cbz	r0, 8001614 <main+0x250>
	while (1) {
 80015e4:	e7fe      	b.n	80015e4 <main+0x220>
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	10110000 	.word	0x10110000
 8001604:	10120000 	.word	0x10120000
 8001608:	20000024 	.word	0x20000024
 800160c:	40013000 	.word	0x40013000
 8001610:	40004400 	.word	0x40004400
	int8_t x, y, z = 0;
 8001614:	f88d 001c 	strb.w	r0, [sp, #28]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //reset CS...
 8001618:	4639      	mov	r1, r7
 800161a:	485f      	ldr	r0, [pc, #380]	; (8001798 <main+0x3d4>)
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800161c:	4c5f      	ldr	r4, [pc, #380]	; (800179c <main+0x3d8>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //reset CS...
 800161e:	f7fe ffbf 	bl	80005a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &address, 1, 50);
 8001622:	4632      	mov	r2, r6
 8001624:	2332      	movs	r3, #50	; 0x32
 8001626:	4669      	mov	r1, sp
 8001628:	4628      	mov	r0, r5
	address = 0x20;
 800162a:	f88d 8000 	strb.w	r8, [sp]
	HAL_SPI_Transmit(&hspi1, &address, 1, 50);
 800162e:	f7ff fad8 	bl	8000be2 <HAL_SPI_Transmit>
	data = 0x67;
 8001632:	2367      	movs	r3, #103	; 0x67
	HAL_SPI_Transmit(&hspi1, &data, 1, 50);
 8001634:	4632      	mov	r2, r6
	data = 0x67;
 8001636:	f88d 3001 	strb.w	r3, [sp, #1]
	HAL_SPI_Transmit(&hspi1, &data, 1, 50);
 800163a:	f10d 0101 	add.w	r1, sp, #1
 800163e:	2332      	movs	r3, #50	; 0x32
 8001640:	4628      	mov	r0, r5
 8001642:	f7ff face 	bl	8000be2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); //set CS...
 8001646:	4632      	mov	r2, r6
 8001648:	4853      	ldr	r0, [pc, #332]	; (8001798 <main+0x3d4>)
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //reset CS...
 800164a:	4e53      	ldr	r6, [pc, #332]	; (8001798 <main+0x3d4>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); //set CS...
 800164c:	4639      	mov	r1, r7
 800164e:	f7fe ffa7 	bl	80005a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //reset CS...
 8001652:	2200      	movs	r2, #0
 8001654:	2108      	movs	r1, #8
 8001656:	4630      	mov	r0, r6
 8001658:	f7fe ffa2 	bl	80005a0 <HAL_GPIO_WritePin>
		address = 0x29 + 0x80;
 800165c:	23a9      	movs	r3, #169	; 0xa9
 800165e:	f88d 3000 	strb.w	r3, [sp]
		HAL_SPI_Transmit(&hspi1, &address, 1, 50);
 8001662:	2201      	movs	r2, #1
 8001664:	2332      	movs	r3, #50	; 0x32
 8001666:	4669      	mov	r1, sp
 8001668:	4628      	mov	r0, r5
 800166a:	f7ff faba 	bl	8000be2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &x, 1, 50);
 800166e:	2332      	movs	r3, #50	; 0x32
 8001670:	2201      	movs	r2, #1
 8001672:	f10d 0102 	add.w	r1, sp, #2
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff fc53 	bl	8000f22 <HAL_SPI_Receive>
		address = 0x2B + 0x80;
 800167c:	23ab      	movs	r3, #171	; 0xab
 800167e:	f88d 3000 	strb.w	r3, [sp]
		HAL_SPI_Transmit(&hspi1, &address, 1, 50);
 8001682:	2201      	movs	r2, #1
 8001684:	2332      	movs	r3, #50	; 0x32
 8001686:	4669      	mov	r1, sp
 8001688:	4628      	mov	r0, r5
 800168a:	f7ff faaa 	bl	8000be2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &y, 1, 50);
 800168e:	2332      	movs	r3, #50	; 0x32
 8001690:	2201      	movs	r2, #1
 8001692:	f10d 0103 	add.w	r1, sp, #3
 8001696:	4628      	mov	r0, r5
 8001698:	f7ff fc43 	bl	8000f22 <HAL_SPI_Receive>
		address = 0x2D + 0x80;
 800169c:	23ad      	movs	r3, #173	; 0xad
 800169e:	f88d 3000 	strb.w	r3, [sp]
		HAL_SPI_Transmit(&hspi1, &address, 1, 50);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2332      	movs	r3, #50	; 0x32
 80016a6:	4669      	mov	r1, sp
 80016a8:	4628      	mov	r0, r5
 80016aa:	f7ff fa9a 	bl	8000be2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &z, 1, 50);
 80016ae:	2332      	movs	r3, #50	; 0x32
 80016b0:	2201      	movs	r2, #1
 80016b2:	a907      	add	r1, sp, #28
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7ff fc34 	bl	8000f22 <HAL_SPI_Receive>
		if (z <= -30) {
 80016ba:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 80016be:	331d      	adds	r3, #29
 80016c0:	da3c      	bge.n	800173c <main+0x378>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7fe ff69 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7fe ff63 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7fe ff5d 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7fe ff57 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80016f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f6:	f7fe fdf5 	bl	80002e4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001700:	4620      	mov	r0, r4
 8001702:	f7fe ff4d 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170c:	4620      	mov	r0, r4
 800170e:	f7fe ff47 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001718:	4620      	mov	r0, r4
 800171a:	f7fe ff41 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800171e:	4620      	mov	r0, r4
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001726:	f7fe ff3b 	bl	80005a0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800172a:	200a      	movs	r0, #10
 800172c:	f7fe fdda 	bl	80002e4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); //set CS...
 8001730:	2201      	movs	r2, #1
 8001732:	2108      	movs	r1, #8
 8001734:	4630      	mov	r0, r6
 8001736:	f7fe ff33 	bl	80005a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //reset CS...
 800173a:	e78a      	b.n	8001652 <main+0x28e>
			if (y >= 15)
 800173c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8001740:	2b0e      	cmp	r3, #14
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001742:	bfcc      	ite	gt
 8001744:	2201      	movgt	r2, #1
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001746:	2200      	movle	r2, #0
 8001748:	4620      	mov	r0, r4
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	f7fe ff27 	bl	80005a0 <HAL_GPIO_WritePin>
			if (y <= -15)
 8001752:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8001756:	330e      	adds	r3, #14
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001758:	bfb4      	ite	lt
 800175a:	2201      	movlt	r2, #1
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800175c:	2200      	movge	r2, #0
 800175e:	4620      	mov	r0, r4
 8001760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001764:	f7fe ff1c 	bl	80005a0 <HAL_GPIO_WritePin>
			if (x <= -15)
 8001768:	f99d 3002 	ldrsb.w	r3, [sp, #2]
 800176c:	330e      	adds	r3, #14
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800176e:	bfb4      	ite	lt
 8001770:	2201      	movlt	r2, #1
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001772:	2200      	movge	r2, #0
 8001774:	4620      	mov	r0, r4
 8001776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177a:	f7fe ff11 	bl	80005a0 <HAL_GPIO_WritePin>
			if (x >= 15)
 800177e:	f99d 3002 	ldrsb.w	r3, [sp, #2]
 8001782:	2b0e      	cmp	r3, #14
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001784:	bfcc      	ite	gt
 8001786:	2201      	movgt	r2, #1
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001788:	2200      	movle	r2, #0
 800178a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178e:	4620      	mov	r0, r4
 8001790:	f7fe ff06 	bl	80005a0 <HAL_GPIO_WritePin>
 8001794:	e7cc      	b.n	8001730 <main+0x36c>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40020c00 	.word	0x40020c00

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017a2:	2007      	movs	r0, #7
 80017a4:	f7fe fdac 	bl	8000300 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	4611      	mov	r1, r2
 80017ac:	f06f 000b 	mvn.w	r0, #11
 80017b0:	f7fe fdb8 	bl	8000324 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	4611      	mov	r1, r2
 80017b8:	f06f 000a 	mvn.w	r0, #10
 80017bc:	f7fe fdb2 	bl	8000324 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	4611      	mov	r1, r2
 80017c4:	f06f 0009 	mvn.w	r0, #9
 80017c8:	f7fe fdac 	bl	8000324 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	4611      	mov	r1, r2
 80017d0:	f06f 0004 	mvn.w	r0, #4
 80017d4:	f7fe fda6 	bl	8000324 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	4611      	mov	r1, r2
 80017dc:	f06f 0003 	mvn.w	r0, #3
 80017e0:	f7fe fda0 	bl	8000324 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	4611      	mov	r1, r2
 80017e8:	f06f 0001 	mvn.w	r0, #1
 80017ec:	f7fe fd9a 	bl	8000324 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017f0:	2200      	movs	r2, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017f6:	4611      	mov	r1, r2
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7fe bd92 	b.w	8000324 <HAL_NVIC_SetPriority>

08001800 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001802:	6802      	ldr	r2, [r0, #0]
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_SPI_MspInit+0x40>)
 8001806:	429a      	cmp	r2, r3
 8001808:	d117      	bne.n	800183a <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_SPI_MspInit+0x44>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	480e      	ldr	r0, [pc, #56]	; (8001848 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001814:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001818:	6451      	str	r1, [r2, #68]	; 0x44
 800181a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800181c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001820:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001824:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2202      	movs	r2, #2
 8001828:	e9cd 1201 	strd	r1, r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001832:	2305      	movs	r3, #5
 8001834:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f7fe fdcb 	bl	80003d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800183a:	b007      	add	sp, #28
 800183c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001840:	40013000 	.word	0x40013000
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_UART_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800184c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800184e:	6802      	ldr	r2, [r0, #0]
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_UART_MspInit+0x44>)
 8001852:	429a      	cmp	r2, r3
 8001854:	d119      	bne.n	800188a <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800185e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001860:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	220c      	movs	r2, #12
 8001872:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001880:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001884:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f7fe fda3 	bl	80003d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800188a:	b007      	add	sp, #28
 800188c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001890:	40004400 	.word	0x40004400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800189c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f7fe fd13 	bl	80002c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80018a6:	f7fe bd8f 	b.w	80003c8 <HAL_SYSTICK_IRQHandler>
	...

080018ac <__libc_init_array>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4d0d      	ldr	r5, [pc, #52]	; (80018e4 <__libc_init_array+0x38>)
 80018b0:	4c0d      	ldr	r4, [pc, #52]	; (80018e8 <__libc_init_array+0x3c>)
 80018b2:	1b64      	subs	r4, r4, r5
 80018b4:	10a4      	asrs	r4, r4, #2
 80018b6:	2600      	movs	r6, #0
 80018b8:	42a6      	cmp	r6, r4
 80018ba:	d109      	bne.n	80018d0 <__libc_init_array+0x24>
 80018bc:	4d0b      	ldr	r5, [pc, #44]	; (80018ec <__libc_init_array+0x40>)
 80018be:	4c0c      	ldr	r4, [pc, #48]	; (80018f0 <__libc_init_array+0x44>)
 80018c0:	f000 f818 	bl	80018f4 <_init>
 80018c4:	1b64      	subs	r4, r4, r5
 80018c6:	10a4      	asrs	r4, r4, #2
 80018c8:	2600      	movs	r6, #0
 80018ca:	42a6      	cmp	r6, r4
 80018cc:	d105      	bne.n	80018da <__libc_init_array+0x2e>
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d4:	4798      	blx	r3
 80018d6:	3601      	adds	r6, #1
 80018d8:	e7ee      	b.n	80018b8 <__libc_init_array+0xc>
 80018da:	f855 3b04 	ldr.w	r3, [r5], #4
 80018de:	4798      	blx	r3
 80018e0:	3601      	adds	r6, #1
 80018e2:	e7f2      	b.n	80018ca <__libc_init_array+0x1e>
 80018e4:	0800191c 	.word	0x0800191c
 80018e8:	0800191c 	.word	0x0800191c
 80018ec:	0800191c 	.word	0x0800191c
 80018f0:	08001920 	.word	0x08001920

080018f4 <_init>:
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	bf00      	nop
 80018f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fa:	bc08      	pop	{r3}
 80018fc:	469e      	mov	lr, r3
 80018fe:	4770      	bx	lr

08001900 <_fini>:
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001902:	bf00      	nop
 8001904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001906:	bc08      	pop	{r3}
 8001908:	469e      	mov	lr, r3
 800190a:	4770      	bx	lr
